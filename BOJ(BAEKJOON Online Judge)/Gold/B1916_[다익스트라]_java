import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    static ArrayList<ArrayList<Node>> g;
    static int[] d;

    static class Node implements Comparable<Node>{
        int to;
        int cost;
        Node(int to, int cost){
            this.to = to;
            this.cost = cost;
        }

        @Override
        public int compareTo(Node node){
            return this.cost - node.cost;
        }
        
    }
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        int M = Integer.parseInt(br.readLine());

        g = new ArrayList<>();
        for(int i=0; i<=N; i++){
            g.add(new ArrayList<>());
        }

        StringTokenizer st;
        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());
            g.get(u).add(new Node(v, c));
        }

        st = new StringTokenizer(br.readLine());
        int from = Integer.parseInt(st.nextToken());
        int to = Integer.parseInt(st.nextToken());

        d = new int[N+1];
        Arrays.fill(d, Integer.MAX_VALUE);
        daijkstra(from);

        System.out.print(d[to]);
        
    }

    public static void daijkstra(int from){
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.offer(new Node(from, 0));
        d[from] = 0;
        while(!pq.isEmpty()){
            Node node = pq.poll();

            if(node.cost > d[node.to])
                continue;
            
            for(int i=0; i<g.get(node.to).size(); i++){
                Node newnode = g.get(node.to).get(i);
                int newcost = d[node.to] + newnode.cost;
                if(d[newnode.to] > newcost){
                    d[newnode.to] = newcost;
                    pq.offer(new Node(newnode.to, newcost));
                }
            }
        }
    }
}
